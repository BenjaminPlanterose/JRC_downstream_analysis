{
stop("CpG density is too high")
}
}
positions = sort(positions)
return(positions)
}
process_read <- function(read_pos_i, JRC_indicator_i, p, cg_pos)
{
n = sum(cg_pos > read_pos_i & cg_pos < read_pos_i+100)
if(JRC_indicator_i)
{
p_hat = sample(c(0,1), 1, prob = c(1-p, p))
M = rbinom(n = 1, size = n, prob = p_hat)
U = n - M
}
else
{
M = rbinom(n = 1, size = n, prob = p)
U = n - M
}
return(c(read_pos_i, U, M))
}
generate_UM_counts <- function(L, l, rho_cpg, phi, n_reads, p, cg_pos = NULL)
{
if(is.null(cg_pos))
{
cg_pos = place_CpGs(L, rho_cpg)
}
read_pos = sample(1:(L-l), n_reads, replace = T)
JRC_indicator = sample(c(0,1), n_reads, prob = c(1-phi, phi), replace = T)
UM_counts = lapply(1:n_reads, function(i) process_read(read_pos[i], JRC_indicator[i], p, cg_pos))
UM_counts = Reduce(f = rbind, UM_counts)
colnames(UM_counts) = c("start", "U", "M")
UM_counts = UM_counts[order(UM_counts[,1]),]
return(list(cg_pos = cg_pos, UM = as.data.frame(UM_counts)))
}
plot_UM <- function(L, l, cg_pos, UM, ...)
{
plot(0, 1, xlim = c(1,L), ylim = c(1, nrow(UM)), type = "n", xlab = 'Genomic position', ylab = 'Read',...)
abline(v = cg_pos, col = "yellow2")
rect(xleft = 0, xright = L, ybottom = 0-0.8, ytop = 0+0.05, border = NA, col = "cornflowerblue")
abline(h = 1:nrow(UM), lty = 2, col = "gray")
for(i in 1:nrow(UM))
{
arrows(x0 = UM$start[i], x1 = UM$start[i]+100, y0 = i, y1 = i, `length` = 0)
if(UM[i,]$U + UM[i,]$M > 0)
{
where = cg_pos[cg_pos > UM$start[i] & cg_pos < UM$start[i] + 100]
col = sample(c(rep("black", UM[i,]$M), rep("white", UM[i,]$U)), UM[i,]$M+UM[i,]$U, replace = F)
points(x = where, y = rep(i, length(where)), col = col, pch = 19)
points(x = where, y = rep(i, length(where)), col = "black", pch = 1)
}
}
}
iteration <- function(L, l, b, rho_cpg, n_reads, p, phi, N_boot)
{
# cg_pos is not specified so a different CpG distribution is generated in each iteration
UM = generate_UM_counts(L = L, l = l, rho_cpg = rho_cpg, phi = phi, n_reads = n_reads, p = p)$UM
# Aggregate counts to estimate methylation levels per bin
breaks = seq(1, L+1, b)
UM$bins = cut(UM$start, breaks = breaks, labels = F)
M = aggregate(M ~ bins, data = UM, FUN = sum)$M
n = aggregate(M+U ~ bins, data = UM, FUN = sum)$`M + U`
beta = M/n
l_bins = table(UM$bins)
beta_vec = unlist(sapply(1:length(l_bins), function(i) rep(beta[i], l_bins[i])))
n_vec = UM$M + UM$U
# Compute logL under H0
logL_H0 = vapply(1:N_boot, function(i) permute(beta_vec, n_vec), numeric(1))
# Compute test statistic
logL = -sum(stats::dbinom(x = UM$M, size = n_vec, prob = beta_vec, log = T))
# Compute permutation pvalue
pval = 1 - mean(logL > logL_H0)
# Estimate p-value if equal to zero
# if(pval == 0)
# {
#   params = fitdistr(logL_H0, 'Gamma')
#   pval = pgamma(q = logL, shape = params$estimate['shape'], rate = params$estimate['rate'], lower.tail = F)
# }
return(pval)
}
permute <- function(beta_vec, n_vec)
{
M = vapply(1:length(beta_vec), function(i) rbinom(n = 1, size = n_vec[i], prob = beta_vec[i]), as.integer(1L))
-sum(stats::dbinom(x = M, size = n_vec, prob = beta_vec, log = T))
}
simulation <- function(L, l, b, rho_cpg, n_reads, p, phi, N_boot, N_iter, N_rep)
{
pval_list = as.list(rep(c(NA),N_rep))
for(i in 1:N_rep)
{
pval_vec = lapply(1:N_iter, function(i) tryCatch(iteration(L, l, b, rho_cpg, n_reads, p, phi, N_boot), error = function(x) NA))
pval_list[[i]] = unlist(pval_vec)
}
return(pval_list)
}
summarize_simulation <- function(pval_list)
{
sapply(pval_list, function(x) mean(x < 0.05, na.rm = T))
}
par(mfrow = c(2,2))
set.seed(4)
cg_pos = place_CpGs(L = 600, rho_cpg = 0.025)
UM_list = generate_UM_counts(L = 600, l = 50, rho_cpg = 0.025, phi = 0, n_reads = 50, p = 0.5, cg_pos = cg_pos)
plot_UM(L = 600, l = 100, UM_list$cg_pos, UM_list$UM, main = 'non-JRC; Group 1; p = 0.5')
UM_list = generate_UM_counts(L = 600, l = 50, rho_cpg = 0.025, phi = 0, n_reads = 50, p = 0.8, cg_pos = cg_pos)
plot_UM(L = 600, l = 100, UM_list$cg_pos, UM_list$UM, main = 'non-JRC; Group 2; p = 0.8')
UM_list = generate_UM_counts(L = 600, l = 50, rho_cpg = 0.025, phi = 1, n_reads = 50, p = 0.5, cg_pos = cg_pos)
plot_UM(L = 600, l = 100, UM_list$cg_pos, UM_list$UM, main = 'JRC; Group 1; p = 0.5')
UM_list = generate_UM_counts(L = 600, l = 50, rho_cpg = 0.025, phi = 1, n_reads = 50, p = 0.8, cg_pos = cg_pos)
plot_UM(L = 600, l = 100, UM_list$cg_pos, UM_list$UM, main = 'JRC; Group 2; p = 0.8')
set.seed(1)
iteration(L = 2000, l = 100, b = 200, rho_cpg = 0.035, n_reads = 100,
p = 0.5, phi = 0, N_boot = 500)
set.seed(1)
iteration(L = 2000, l = 100, b = 200, rho_cpg = 0.035, n_reads = 100,
p = 0.5, phi = 1, N_boot = 500)
L = 2000
l = 100
b = 200
rho_cpg = c(0.035, 0.055)
n_reads = c(100, 200)
p = c(0.4, 0.5)
phi = c(0, 1)
conditions = expand.grid(L, l, b, rho_cpg, n_reads, p, phi)
colnames(conditions) = c("L", "l", "b", "rho_cpg", "n_reads", "p", "phi")
N_boot = 1000
N_iter = 10
N_rep = 2
start_time <- Sys.time()
jkl = iteration(L, l, b, rho_cpg[1], n_reads[1], p[1], phi[1], N_boot)
end_time <- Sys.time()
time_per_iter = difftime(end_time, start_time, units = "hours")
nCores = 4; nrow(conditions)*N_iter*N_rep*time_per_iter/nCores # 0.01094146 hours
start_time <- Sys.time()
RNGkind("L'Ecuyer-CMRG")
set.seed(1234)
pval_list = mclapply(1:nrow(conditions), function(i) simulation(L = conditions$L[i], l = conditions$l[i], b = conditions$b[i],
rho_cpg = conditions$rho_cpg[i], phi = conditions$phi[i],
n_reads = conditions$n_reads[i], p = conditions$p[i], N_boot = N_boot,
N_iter = N_iter, N_rep = N_rep),  mc.cores = 4)
end_time <- Sys.time()
difftime(end_time, start_time, units = "hours") # 0.02132892 hours
results = conditions[rep(seq_len(nrow(conditions)), each = N_rep), ]
results$p_sig = unlist(lapply(1:length(pval_list), function(x) summarize_simulation(pval_list[[x]])))
results$rho_cpg = factor(results$rho_cpg)
results$p = factor(results$p)
results$phi = factor(results$phi)
ggplot(data = results, mapping = aes(x = n_reads, y = p_sig, col = phi)) +
facet_wrap(p ~ rho_cpg, ncol = 2, labeller = labeller(p = label_both, rho_cpg = label_both)) +
geom_hline(yintercept = 0.05, linetype = 'dashed') +
geom_point(alpha = 0.8) +
geom_smooth(alpha = 0.5, method = "loess", level = 0.95) +
theme(legend.text=element_text(size=8),
strip.text = element_text(size = 7),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle(paste('L = ', L, '; l = ', l, '; b = ', b, '; N_iter = ', N_iter, '; N_boot = ',
N_boot, '; N_rep = ', N_rep, sep = '')) +
ylab("1/N_iter * Sum_i I(pval_i < 0.05)") + ylim(c(0,1))
.Machine
head(WB_sig_filtered2)
head(WB_sig_filtered2)
head(WB_sig_filtered2)
library(DSS)
library(data.table)
library(DSS)
library(data.table)
prep_format <- function(mat)
{
data.frame(chr = mat$V1, pos = mat$V2, N = mat$V5, X = round(mat$V4*mat$V5))
}
showOneDML <- function (OneDMR, BSobj, ext = 500, ylim = c(0, 1))
{
allchr = as.character(seqnames(BSobj))
allpos = start(BSobj)
X = getBSseq(BSobj, "M")
N = getBSseq(BSobj, "Cov")
chr = as.character(OneDMR$chr)
ix.chr = which(allchr == chr)
thispos = allpos[ix.chr]
thisN = N[ix.chr, ]
thisX = X[ix.chr, ]
xlim = c(OneDMR$pos - ext, OneDMR$pos + ext)
ix1 = which(thispos <= xlim[2] & thispos >= xlim[1])
nSample = ncol(X)
if (nSample > 2) {
y.cex = 0.66
}
else y.cex = 1
sNames = sampleNames(BSobj)
par(mfrow = c(nSample, 1), mar = c(2.5, 2.5, 1.6, 2.5), mgp = c(1.5,
0.5, 0))
thisP = thisX/thisN
maxN = max(thisN[ix1, ])
for (i in 1:ncol(X)) {
plot(thispos[ix1], thisP[ix1, i], type = "h", col = "blue",
axes = F, lwd = 1.5, xlab = "", ylab = "", ylim = ylim,
xlim = xlim, main = sNames[i])
abline(v = OneDMR$pos, lty = 2, col = 'yellow2')
box(col = "black")
axis(1, )
axis(2, col = "blue", col.axis = "blue")
mtext(chr, side = 1, line = 1.33, cex = y.cex)
mtext("methyl%", side = 2, line = 1.33, col = "blue",
cex = y.cex)
thisN.norm = thisN[ix1, i]/maxN * ylim[2]
lines(thispos[ix1], thisN.norm, type = "l", col = "gray",
lwd = 1.5)
if (maxN >= 4) {
axis(side = 4, at = seq(0, ylim[2], length.out = 5),
labels = round(seq(0, maxN, length.out = 5)))
}
else {
axis(side = 4, at = seq(0, ylim[2], length.out = maxN +
1), labels = 0:maxN)
}
mtext("read depth", side = 4, line = 1.33, cex = y.cex)
rect(OneDMR$pos, ylim[1], OneDMR$pos, ylim[2], col = "#FF00001A",
border = NA)
}
}
count_cgs <- function(dmrs, files)
{
counts = matrix(nrow = nrow(dmrs), ncol = length(files))
rownames(counts) = paste(dmrs$chr, paste(dmrs$start, dmrs$end, sep = '-'), sep = ':')
colnames(counts) = files
for(j in 1:length(files))
{
print(paste(j, 'out of ', length(files)))
for(i in 1:nrow(dmrs))
{
print(paste(i, 'out of ', nrow(dmrs)))
CHR = dmrs$chr[i]
START = dmrs$start[i]
END = dmrs$end[i]
command = paste("awk ", "'", "$1==", '"', CHR, '"', " && ", "$2>=", START, " && ", "$2<", END, "' ", file_i, ' | wc -l', sep = "")
counts[i,j] = fread(cmd = noquote(command))$V1
}
}
return(counts)
}
export_bed <- function(dmrs, name)
{
bed_df <- data.frame(seqname = dmrs$chr,
start = as.integer(dmrs$start), end = as.integer(dmrs$end),
name = paste(dmrs$chr, paste(dmrs$start, dmrs$end, sep = '-'), sep = ':'),
score = 1000)
write.table(x = paste('track name=', name, ' description=', name, ' useScore=1', sep = ''),
file = paste(name, '.bed', sep = ''),
quote = F, sep = '\t', row.names = F, col.names = F)
fwrite(x = bed_df, file = paste(name, '.bed', sep = ''), nThread = 4,
sep = '\t', col.names = F, append = T)
}
pt <- overlapPermTest(A=A, B=B, ntimes=10, alternative = 'greater',
genome = 'BSgenome.Hsapiens.UCSC.hg38.masked',
non.overlapping = F, verbose = T)
6.7/5
7.51/3
library(minfi)
help("dropLociWithSnps")
dropLociWithSnps
getSnpInfo
getAnnotationObject
getSnpInfo
getAnnotationObject
grep(pattern = "^SNPs\\.", x = '', value = TRUE)
grep(pattern = "^SNPs\\.", x = 'RGChannelSet', value = TRUE)
getSnpInfo
library(Illumina450ProbeVariants.db)
help(Illumina450ProbeVariants.db)
getAnnotationObject(object)@defaults
showClass("RGChannelSet")
showClass("RGChannelSet")@defaults
showClass("RGChannelSetExtended")
dropLociWithSnps
getSnpInfo
library(wateRmelon)
help(dasen)
help(getSnpInfo)
4.1-0.6
3.5/2
WB = process.file(files[1])
{
df = fread(filename)
names(df)[1] = "region"
names(df)[2] = "P"
# Calculate p-value
df = na.omit(df)
p_val_cutoff = 0.05/nrow(df)
df$P = df$P + .Machine$double.xmin
df$SNP = df$region
df = separate(data = df, col = region, into = c("chr", "range"), sep = ":")
df = separate(data = df, col = range, into = c("region_start", "region_end"), sep = "\\-")
df$region_start <- as.integer(df$region_start)
df$region_end <- as.integer(df$region_end)
return(df)
}
WB = process.file(files[1])
{
df = fread(filename)
names(df)[1] = "region"
names(df)[2] = "P"
# Calculate p-value
df = na.omit(df)
p_val_cutoff = 0.05/nrow(df)
df$P = df$P + .Machine$double.xmin
df$SNP = df$region
df = separate(data = df, col = region, into = c("chr", "range"), sep = ":")
df = separate(data = df, col = range, into = c("region_start", "region_end"), sep = "\\-")
df$region_start <- as.integer(df$region_start)
df$region_end <- as.integer(df$region_end)
return(df)
}
process.file <- function(filename)
{
df = fread(filename)
names(df)[1] = "region"
names(df)[2] = "P"
# Calculate p-value
df = na.omit(df)
p_val_cutoff = 0.05/nrow(df)
df$P = df$P + .Machine$double.xmin
df$SNP = df$region
df = separate(data = df, col = region, into = c("chr", "range"), sep = ":")
df = separate(data = df, col = range, into = c("region_start", "region_end"), sep = "\\-")
df$region_start <- as.integer(df$region_start)
df$region_end <- as.integer(df$region_end)
return(df)
}
library(data.table)
library(tidyr)
library(grid)
library(gridGraphics)
library(qqman)
library(ggplot2)
# Load functions
process.file <- function(filename)
{
df = fread(filename)
names(df)[1] = "region"
names(df)[2] = "P"
# Calculate p-value
df = na.omit(df)
p_val_cutoff = 0.05/nrow(df)
df$P = df$P + .Machine$double.xmin
df$SNP = df$region
df = separate(data = df, col = region, into = c("chr", "range"), sep = ":")
df = separate(data = df, col = range, into = c("region_start", "region_end"), sep = "\\-")
df$region_start <- as.integer(df$region_start)
df$region_end <- as.integer(df$region_end)
return(df)
}
create_manhattan_plot = function(df, sample_name)
{
df$BP = rowMeans(df[,c('region_start', 'region_end')], na.rm=TRUE)
df$CHR = substring(df$chr, 4)
df$CHR[df$CHR == "X"] = "23"
df$CHR[df$CHR == "Y"] = "24"
df$CHR = as.numeric(df$CHR)
manhattan_data = df[, c("SNP", "CHR", "BP", "P")]
chr_freq = as.data.frame(table(manhattan_data$CHR))
png(filename = paste(sample_name, "manhattan_plot.png", sep = " "), width = 10, height = 10, units = 'in', res = 300)
manhattan(manhattan_data, main = paste(sample_name, "Manhattan Plot - All Binpolish Regions", sep=" "), ylim=c(0,350), cex=0.6, cex.axis=0.7,
col = c("cadetblue3", "coral1"), suggestiveline = -log10(p_val_cutoff), genomewideline = F, chrlabs = c(1:22, "X","Y"))
dev.off()
}
# PATHs
files = c("/media/ultron/2tb_disk1/ben/JRC_project/binokulars_output/pooled_blood_hg38_analysis/binokulars_output/test_results/p_values.txt",
"/media/ultron/2tb_disk1/ben/JRC_project/binokulars_output/pooled_sperm_hg38_analysis/binokulars_output/test_results/p_values.txt",
"/media/ultron/2tb_disk1/ben/JRC_project/binokulars_output/merged_hg38_analysis/binokulars_output/test_results/p_values.txt")
output_location = "/media/ultron/2tb_disk1/ben/JRC_project/scripts/5_functional_annotation/images/"
sample_names = c("WB hg38", "SP hg38", "WB+SP hg38")
WB = process.file(files[1])
WB
# Load functions
process.file <- function(filename)
{
df = fread(filename)
names(df)[1:2] = c("region", "P")
# Calculate p-value
df = na.omit(df)
df$P = df$P + .Machine$double.xmin
df = separate(data = df, col = region, into = c("chr", "range"), sep = ":")
df = separate(data = df, col = range, into = c("region_start", "region_end"), sep = "\\-")
df$region_start <- as.integer(df$region_start)
df$region_end <- as.integer(df$region_end)
return(df)
}
create_manhattan_plot = function(df, sample_name)
{
df$SNP = df$region
p_val_cutoff = 0.05/nrow(df)
df$BP = rowMeans(df[,c('region_start', 'region_end')], na.rm=TRUE)
df$CHR = substring(df$chr, 4)
df$CHR[df$CHR == "X"] = "23"
df$CHR[df$CHR == "Y"] = "24"
df$CHR = as.numeric(df$CHR)
manhattan_data = df[, c("SNP", "CHR", "BP", "P")]
chr_freq = as.data.frame(table(manhattan_data$CHR))
png(filename = paste(sample_name, "manhattan_plot.png", sep = " "), width = 10, height = 10, units = 'in', res = 300)
manhattan(manhattan_data, main = paste(sample_name, "Manhattan Plot - All Binpolish Regions", sep=" "), ylim=c(0,350), cex=0.6, cex.axis=0.7,
col = c("cadetblue3", "coral1"), suggestiveline = -log10(p_val_cutoff), genomewideline = F, chrlabs = c(1:22, "X","Y"))
dev.off()
}
# PATHs
files = c("/media/ultron/2tb_disk1/ben/JRC_project/binokulars_output/pooled_blood_hg38_analysis/binokulars_output/test_results/p_values.txt",
"/media/ultron/2tb_disk1/ben/JRC_project/binokulars_output/pooled_sperm_hg38_analysis/binokulars_output/test_results/p_values.txt",
"/media/ultron/2tb_disk1/ben/JRC_project/binokulars_output/merged_hg38_analysis/binokulars_output/test_results/p_values.txt")
output_location = "/media/ultron/2tb_disk1/ben/JRC_project/scripts/5_functional_annotation/images/"
sample_names = c("WB hg38", "SP hg38", "WB+SP hg38")
WB = process.file(files[1])
WB
sample_names
create_manhattan_plot = function(df, sample_name)
{
df$SNP = df$region
p_val_cutoff = 0.05/nrow(df)
df$BP = rowMeans(df[,c('region_start', 'region_end')], na.rm=TRUE)
df$CHR = substring(df$chr, 4)
df$CHR[df$CHR == "X"] = "23"
df$CHR[df$CHR == "Y"] = "24"
df$CHR = as.numeric(df$CHR)
manhattan_data = df[, c("SNP", "CHR", "BP", "P")]
chr_freq = as.data.frame(table(manhattan_data$CHR))
tiff(filename = paste(sample_name, "manhattan_plot.png", sep = " "), width = 10, height = 10, units = 'in', res = 300)
manhattan(manhattan_data, main = paste(sample_name, "Manhattan Plot - All Binpolish Regions", sep=" "), ylim=c(0,350), cex=0.6, cex.axis=0.7,
col = c("cadetblue3", "coral1"), suggestiveline = -log10(p_val_cutoff), genomewideline = F, chrlabs = c(1:22, "X","Y"))
dev.off()
}
getwd()
library(data.table)
library(dplyr)
library(tidyr)
intron_function = function(x)
{
list(x[[1]], x[[2]], x[[3]], x[[4]], as.integer(x[[6]] + 1), as.integer(x[[9]] - 1), "intron")
}
promoter_func = function(x)
{
if(x[[2]] == "+")
{
if(x[[3]] != 0) {
p_start = max(0, x[[3]] - 1500)
p_end = x[[3]] - 1
list(x[[8]], x[[9]], x[[1]], x[[2]], p_start, p_end, "promoter")
}
} else if (x[[2]] == "-") {
p_start = x[[4]] + 1
p_end = x[[4]] + 1500
list(x[[8]], x[[9]], x[[1]], x[[2]], p_start, p_end, "promoter")
} else {
print("ERROR - strand notation incorrect.")
}
}
refseq_annotation = function(genome_version, filename, where)
{
setwd(where)
refseq_genes = fread(filename)
colnames(refseq_genes) = c("bin", "name", "chrom", "strand", "txStart", "txEnd", "cdsStart", "cdsEnd", "exonCount", "exonStarts", "exonEnds", "score", "name2", "cdsStartStat", "cdsEndStat", "exonFrames")
compr_refseq = refseq_genes[, c("name", "chrom", "strand", "txStart", "txEnd", "cdsStart", "cdsEnd", "exonCount", "exonStarts", "exonEnds", "name2")]
##############################
# Combine genes / long RNA at the same location
compr_refseq = compr_refseq %>%
group_by(chrom, strand, txStart, txEnd, exonCount, exonStarts, exonEnds) %>%
summarise(name = paste(name, collapse = ", "), name2 = paste(name2, collapse = ", "))
est_exons = as.integer(sum(compr_refseq$exonCount))
est_introns = est_exons
est_promoters = as.integer(nrow(compr_refseq))
est_size = est_introns + est_exons + est_promoters + 1000
##############################
# Add EXONS to annotation
#compr_refseq = head(compr_refseq,100)
compr_refseq_orig = copy(compr_refseq)
compr_refseq = separate_rows(compr_refseq, exonStarts, exonEnds, convert = TRUE)
compr_refseq = na.omit(compr_refseq)
annotation = setNames(data.frame(matrix(ncol = 9, nrow = est_size)), c("chrom", "strand", "txStart", "txEnd", "exonCount", "exonStarts", "exonEnds", "name", "name2"))
annotation[1:nrow(compr_refseq),] = compr_refseq[1:nrow(compr_refseq),]
annotation = annotation[,c(8,9,1,2,6,7)]
colnames(annotation) = c("gene_name", "gene_name_2", "chrom", "strand", "start", "end")
annotation[1:nrow(compr_refseq), "type"] = "exon"
##############################
# Add INTRONS to annotation
# "gene_name", "gene_name_2", "chrom", "strand", "start", "end", "type"
annotation_copy = copy(annotation)
annotation_copy = transform(annotation_copy, next_gene_name = c(gene_name[-1], gene_name[1]))
annotation_copy = transform(annotation_copy, next_exon_start = c(start[-1], start[1]))
# for hg38, regions were found where exon next exon start was 2 bp after previous exon end
intron_index = which(annotation_copy$gene_name == annotation_copy$next_gene_name & annotation_copy$end + 2 < annotation_copy$next_exon_start)
intron_df = lapply(intron_index, function(x) intron_function(annotation_copy[x,]))
intron_df = as.data.frame(do.call(rbind, intron_df))
colnames(intron_df) = c("gene_name", "gene_name_2", "chrom", "strand", "start", "end", "type")
#intron_df = do.call(rbind, Map(data.frame, gene_name=intron_df$gene_name, gene_name_2=intron_df$gene_name_2, chrom=intron_df$chrom, strand=intron_df$strand, start=intron_df$start, end=intron_df$end, type=intron_df$type))
for(i in 1:ncol(intron_df))
{
intron_df[[i]] = unlist(intron_df[[i]])
}
##############################
# Add PROMOTERS to annotation
promoter_df = lapply(1:nrow(compr_refseq_orig), function(x) promoter_func(compr_refseq_orig[x,]))
promoter_df = as.data.frame(do.call(rbind, promoter_df))
colnames(promoter_df) = c("gene_name", "gene_name_2", "chrom", "strand", "start", "end", "type")
for(i in 1:ncol(promoter_df))
{
promoter_df[[i]] = unlist(promoter_df[[i]])
}
annotation = na.omit(annotation)
annotation_final = do.call("rbind", list(annotation, intron_df, promoter_df))
write.table(annotation_final, file=paste(genome_version, '_refseq_annotation.tsv', sep=""), quote=FALSE, sep='\t', col.names = FALSE, row.names = FALSE)
}
refseq_annotation('hg38', "hg38.refGene.txt", '/media/ultron/2tb_disk1/ben/JRC_project/scripts/5_functional_annotation/2_annotation/assets/')
